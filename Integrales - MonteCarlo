/* Cálculo de integral mediante Monte Carlo*/
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#define N 10000

/*Variables globales*/
double *n;


/*Declaración de funciones*/
double int_MC(double (*)(double), int);
double varianza(double (*)(double), int);
double f_simple(double);
double f_importancia(double);
double prueba(double);
void alea(int);


int main()
{
	/*Declaracion de variables*/
	double int_exact;
	double int_simple, var_simple;
	double int_import, var_import;
	double err_simple, err_import;

	srand(time(NULL));
	n = (double*) malloc(sizeof(double)*N);
	alea(N);
	int_exact = (exp(1) - 2)/(exp(1) - 1);
	FILE *datos = fopen("monte_carlo.txt","w");
	int i = 0;
	for (i= 1; i<N; i++)
	{
		int_simple = int_MC(f_simple, i);
		var_simple = varianza(f_simple, i);
		int_import = int_MC(f_importancia, i);
		var_import = varianza(f_importancia, i);
		err_simple = var_simple/int_simple;
		err_import = var_import/int_import;
		fprintf(datos, "%d\t %15.14lf\t %15.14lf\t %15.14lf\t %15.14lf\n", i, var_simple, var_import, err_simple, err_import);
		if ((0.049 < err_simple)&&(err_simple < 0.05))
		{
			printf("Puntos con error aproximado al 5 por ciento -simple %d\n",i);
		}
		if ((0.045 < err_import)&&(err_import < 0.055))
		{
			printf("Puntos con error aproximado al 5 por ciento -importancia  %d\n",i);
		}
	}
	printf("El valor exacto de la integral es  %f\n",int_exact);
	printf("El valor por Monte Carlo por muestreo simple es  %f\n",int_simple);
	printf("El valor por Monte Carlo por muestreo por importancia es  %f\n",int_import);
	printf("Se utilizaron 10000 puntos\n");
	/*Instrucción para graficar*/
	fclose(datos);
	system("gnuplot -p practica5.gnu"); 
	return 0;
}

double f_simple(double x)
{
	return (exp(x) -1)/(exp(1) - 1);
}

double f_importancia(double x)
{
	return (exp(sqrt(x)) -1.0)/(2*sqrt(x)*(exp(1.0) - 1.0));
}

/*Funcion que calcula integral por Monte Carlo*/
double int_MC(double (*f)(double x), int A)
{
	double sum = 0;
	double a = 0;
	int i = 0;
	for(i=0; i<A; i++)
	{ 
		a = n[i];
		sum = f(a) + sum;
	}
	return sum/A;
}

/*Funcion que calcula varianza*/
double varianza(double (*f)(double x), int A)
{
	double med_f = 0;
	double med_f2 = 0;
	double med = 0;
	double aux = 0;
	int i = 0;
	for(i=0; i<A; i++) 	
	{
		aux = n[i];
		med_f = f(aux) + med_f; 
		
		med_f2 = pow(f(aux),2) + med_f2; 
	}
	med_f = med_f/A;

	med_f2 = med_f2/A;
	med = med_f2 - pow(med_f,2);
	med = med/A;	
	med = pow(med, 0.5);
	return med;
}

/*Funcion que genera un array de nros aleatorios*/
void alea(int A)
{
	double a;
	int i = 0;
	for(i=0; i<A; i++)
	{
		a = (1.0*rand())/RAND_MAX;
		if (a != 0)
		{
			n[i] = a;
		}else{
			i--;
		}
	}
}
