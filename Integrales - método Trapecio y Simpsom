/* Integrales - método trapecio y simpson */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
/*Declaración de funciones*/
double int_rodaja(double,double);
double int_trapecio(double, double, double);
double int_simpson(double, double, double);


int main()
{
	double N;
	double int_T, int_S;
	double error_T, error_S;
	int i = 0;
	/*Generador de puntos*/	
	FILE *puntos = fopen("trapecio_simpson.txt", "w");	
	for (i = 1; i<25; i++)
	{
		N = 10 + pow(2,i);
		int_T = int_trapecio(N, 0,1);
		int_S = int_simpson(N, 0, 1);
		error_T = fabs((exp(1.0)-exp(0.0))-int_T);
		error_S = fabs((exp(1.0)-exp(0.0))-int_S);		
		fprintf(puntos, "%19.18lf\t %19.18lf\t %19.18lf\n",N, error_T, error_S);
	}
	fclose(puntos);	
	
	/*Graficador*/
	system("gnuplot -p practica2.gnu"); 
	return 0;
}

/*Método del trapecio*/
double int_trapecio(double N, double inf, double sup)
{
	double d = (sup - inf)/N;
	double func = 0.0;
	int i = 0;
	for (i=1; i<N; i++)
	{
		func = exp(i*d) + func;
	}
	func = d*((exp(0) + exp(1))/2 + func);
	return func;
}

/*Método del Simpson*/
double int_simpson(double N, double inf, double sup)
{
	int i = 0;
	double d = (sup - inf)/N;
	double func = 0.0;
	float a = 0.0;
	for (i=1; i<N; i++)
	{
		if (i%2 == 0)
		{
			a = 2.0/3;
		}else{
			a = 4.0/3;
		}
		func = a*exp(i*d) + func; 
	}
	func = d*((exp(0) + exp(1))/3 + func);
	return func;
}
